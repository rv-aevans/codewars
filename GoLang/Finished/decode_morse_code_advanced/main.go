package main

import (
	"strings"
)

func main() {
	// fmt.Println(DecodeMorse(DecodeBits("0111000111000111000111000000000111000000000111111111000111000111111111000111111111000000000000000000000111000111111111000111111111000111111111000000000111000111000111111111000000000111111111000111000111000000000111")))
	// fmt.Println(DecodeMorse(DecodeBits("1100110011001100000011000000111111001100111111001111110000000000000011001111110011111100111111000000110011001111110000001111110011001100000011")))
	// fmt.Println(DecodeMorse(DecodeBits
}

func DecodeBits(bits string) string {
	bits = strings.TrimRight(strings.TrimLeft(bits, "0"), "0")
	var interval, cur int
	for i := range bits {
		if i == 0 {
			cur = 1
		} else if bits[i-1] == bits[i] {
			cur++
		} else if interval == 0 {
			interval = cur
			cur = 1
		} else {
			if interval > cur {
				interval = cur
			}
			cur = 1
		}
	}

	if interval == 0 {
		interval = cur
	}

	wordCommas := strings.Repeat(",", 7)
	spaceCommas := strings.Repeat(",", 3)
	dashOnes := strings.Repeat("1", interval*3)
	spaceOnes := strings.Repeat("1", interval)
	intervalZeros := strings.Repeat("0", interval)

	combined := strings.Join((strings.Split(bits, intervalZeros)), ",")
	withWordSpace := strings.ReplaceAll(combined, wordCommas, "   ")
	withCharSpace := strings.ReplaceAll(withWordSpace, spaceCommas, " ")
	withDashes := strings.ReplaceAll(withCharSpace, dashOnes, "-")
	withDots := strings.ReplaceAll(withDashes, spaceOnes, ".")
	removeCommas := strings.ReplaceAll(withDots, ",", "")

	return removeCommas
}

func DecodeMorse(morseCode string) string {
	s := strings.Split(strings.ReplaceAll(morseCode, "   ", " SPACE "), " ")
	var characterMap = map[string]string{}
	for key, value := range morsemap {
		characterMap[value] = key
	}
	var res string
	for _, v := range s {
		if v == "SPACE" {
			res += " "
			continue
		}
		res += characterMap[v]
	}
	return res
}

var morsemap = map[string]string{
	"A": ".-",
	"B": "-...",
	"C": "-.-.",
	"D": "-..",
	"E": ".",
	"F": "..-.",
	"G": "--.",
	"H": "....",
	"I": "..",
	"J": ".---",
	"K": "-.-",
	"L": ".-..",
	"M": "--",
	"N": "-.",
	"O": "---",
	"P": ".--.",
	"Q": "--.-",
	"R": ".-.",
	"S": "...",
	"T": "-",
	"U": "..-",
	"V": "...-",
	"W": ".--",
	"X": "-..-",
	"Y": "-.--",
	"Z": "--..",
	"1": ".----",
	"2": "..---",
	"3": "...--",
	"4": "....-",
	"5": ".....",
	"6": "-....",
	"7": "--...",
	"8": "---..",
	"9": "----.",
	"0": "-----",
	".": ".-.-.-",
	",": "--..--",
	"?": "..--..",
	"!": "-.-.--",
	"-": "-....-",
	"/": "-..-.",
	"@": ".--.-.",
	"(": "-.--.",
	")": "-.--.-",
}
